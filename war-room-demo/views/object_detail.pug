extends layout 

block content
    h1 #{obj_name}
    div.canvas2
    script(src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js")
    script(src="https://cdn.jsdelivr.net/npm/three@0.128.0/examples/js/loaders/GLTFLoader.js")
    script.
        const canvas = document.querySelector(".canvas2");
        const objUrl = '#{obj_url}';
        if (objUrl !== '') {
          const scene = new THREE.Scene();
          const camera = new THREE.PerspectiveCamera(75, canvas.offsetWidth / canvas.offsetHeight, 0.1, 1000);
          const renderer = new THREE.WebGLRenderer();
          renderer.setSize(canvas.offsetWidth, canvas.offsetHeight);
          canvas.appendChild(renderer.domElement);
          
          // Add ambient light
          const ambientLight = new THREE.AmbientLight(0x404040); // soft white light
          scene.add(ambientLight);
          // Create a plane geometry
          const planeGeometry = new THREE.PlaneGeometry(1, 1);
          // Create a material for the plane
          const planeMaterial = new THREE.MeshBasicMaterial({ color: 0xf0ff00, side: THREE.DoubleSide });
          // Create a mesh by combining the geometry and material
          const planeMesh = new THREE.Mesh(planeGeometry, planeMaterial);
          planeMesh.position.set(0, 0, 0);
          scene.add(planeMesh);
          const loader = new THREE.GLTFLoader();
          loader.load(objUrl, function (gltf) {
            const newScene = gltf.scene;
            const targetSize = 1;
            newScene.traverse( (obj) => {
              if (obj instanceof THREE.Mesh) {
                // Calculate the current size of the object's bounding box
                const boundingBox = new THREE.Box3().setFromObject(obj);
                const currentSize = boundingBox.getSize(new THREE.Vector3());

                // Calculate the scale factor required to normalize the size
                const scaleFactor = targetSize / Math.max(currentSize.x, currentSize.y, currentSize.z);
                // Calculate the offset of the pivot point relative to the center of the object
                const pivotOffset = boundingBox.getCenter(new THREE.Vector3()).negate();
                // Scale the object uniformly to match the target size
                obj.scale.set(scaleFactor, scaleFactor, scaleFactor);
                obj.position.add(pivotOffset.multiplyScalar(scaleFactor));
              }
            });
            scene.add(newScene);
            camera.position.z = 1;

            const animate = function () {
              requestAnimationFrame(animate);
              gltf.scene.rotation.y += 0.01;
              renderer.render(scene, camera);
            };

            animate();
          }, undefined, function (error) {
            console.log(error);
          });
        }